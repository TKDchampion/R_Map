## Fit SVR Model and Prepare Scatter Plot
#Install Package
install.packges("e1071")
#Load Library
library(e1071)
#Scatter Plot
plot(data)
#Regression with SVM
modelsvm=svm(Y~X,data)
#Predict using SVM regression
predYsvm <- predict(modelsvm, data)
##Overlay SVM Predictions on Scatter Plot
points(data$X, predYsvm, col = "red", pch=16)
## Calculate parameters of the SVR Model
#Find value of W
W=t(modelsvm$coefs) %*% modelsvm$SV
#Find value of b
b=modelsvm$rho
## RMSE for SVR Model
#Calculate RMSE
RMSEsvm=rmse(predYsvm,data$Y)
##  Optimising SVR Model and Selecting Best Model
#Tune the above SVM model
OptModelsvm=tune(svm, Y~X, data=data,ranges=list(elsilon=seq(0,1,0.1), cost=1:100))
#Print optimum value of parameters
print(OptModelsvm)
#Plot the perfrormance of SVM Regression model
plot(OptModelsvm)
#Find out the best model
BstModel=OptModelsvm$best.model
#Predict Y using best model
PredYBst=predict(BstModel,data)
#Calculate RMSE of the best model
RMSEBst=rmse(PredYBst,data$Y)
## Calculate parameters of the Best SVR Model
#Find value of W
W=t(BstModel$coefs) %*% BstModel$SV
#Find value of b
b=BstModel$rho
## Plotting SVR Model and Tuned Model in same plot
plot(data, pch=16)
points(data$X, predYsvm, col = "blue", pch=3)
points(data$X, PredYBst, col = "red", pch=4)
points(data$X, predYsvm, col = "blue", pch=3, type="l")
points(data$X, PredYBst, col = "red", pch=4, type="l")
#Load support vector library
library (e1071)
#Create toy dataset
X <- 1:10
Y <- X*X
data <- data.frame ( X , Y )
#Create SVR model
svrmodel <- svm( Y ~ X, data)
tuneResult <- tune(svm, Y ~ X,  data = data,ranges = list(epsilon = seq(0,0.2,0.01), cost= 2^(2:9)))
svrmodel <- tuneResult$best.model
predictedY <- predict( svrmodel , newdata = data.frame( X <- data$X+0.5))
#plot data
plot ( data )
#add line through data points
lines ( data , col = "blue" )
# Add points for fitted svrmodel
points(data$X+0.5 , predictedY , col = "red" , pch=4)
lines( data$X+0.5 , predictedY , col = "red" )
# load the package
library(nnet)
# load data
data(longley)
x <- longley[,1:6]
y <- longley[,7]
# fit model
fit <- nnet(Employed~., longley, size=12, maxit=500, linout=T, decay=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, x, type="raw")
# summarize accuracy
mse <- mean((y - predictions)^2)
print(mse)
# load the package
library(nnet)
# load data
data(longley)
x <- longley[,1:6]
y <- longley[,7]
# fit model
fit <- nnet(Employed~., longley, size=12, maxit=1000, linout=T, decay=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, x, type="raw")
# summarize accuracy
mse <- mean((y - predictions)^2)
print(mse)
# load the package
library(nnet)
# load data
data(longley)
x <- longley[,1:6]
y <- longley[,7]
# fit model
fit <- nnet(Employed~., longley, size=12, maxit=1000, linout=T, decay=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, x, type="raw")
# summarize accuracy
mse <- mean((y - predictions)^2)
print(mse)
# load the package
library(nnet)
# load data
data(longley)
x <- longley[,1:6]
y <- longley[,7]
# fit model
fit <- nnet(Employed~., longley, size=12, maxit=1000, linout=T, decay=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, x, type="raw")
# summarize accuracy
mse <- mean((y - predictions)^2)
print(mse)
# load the package
library(nnet)
# load data
data(longley)
x <- longley[,1:6]
y <- longley[,7]
# fit model
fit <- nnet(Employed~., longley, size=12, maxit=1000, linout=T, decay=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, x, type="raw")
# summarize accuracy
mse <- mean((y - predictions)^2)
print(mse)
# load the package
library(nnet)
# load data
data(longley)
x <- longley[,1:6]
y <- longley[,7]
# fit model
fit <- nnet(Employed~., longley, size=12, maxit=1000, linout=T, decay=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, x, type="raw")
# summarize accuracy
mse <- mean((y - predictions)^2)
print(mse)
# load the package
library(nnet)
# load data
data(longley)
x <- longley[,1:6]
y <- longley[,7]
# fit model
fit <- nnet(Employed~., longley, size=12, maxit=1000, linout=T, decay=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, x, type="raw")
# summarize accuracy
mse <- mean((y - predictions)^2)
print(mse)
# load the package
library(nnet)
# load data
data(longley)
x <- longley[,1:6]
y <- longley[,7]
# fit model
fit <- nnet(Employed~., longley, size=12, maxit=1000, linout=T, decay=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, x, type="raw")
# summarize accuracy
mse <- mean((y - predictions)^2)
print(mse)
# load the package
library(nnet)
# load data
data(longley)
x <- longley[,1:6]
y <- longley[,7]
# fit model
fit <- nnet(Employed~., longley, size=12, maxit=1000, linout=T, decay=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, x, type="raw")
# summarize accuracy
mse <- mean((y - predictions)^2)
print(mse)
# load the package
library(nnet)
# load data
data(longley)
x <- longley[,1:6]
y <- longley[,7]
# fit model
fit <- nnet(Employed~., longley, size=12, maxit=1000, linout=T, decay=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, x, type="raw")
# summarize accuracy
mse <- mean((y - predictions)^2)
print(mse)
# load the package
library(nnet)
# load data
data(longley)
x <- longley[,1:6]
y <- longley[,7]
# fit model
fit <- nnet(Employed~., longley, size=12, maxit=1000, linout=T, decay=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, x, type="raw")
# summarize accuracy
mse <- mean((y - predictions)^2)
print(mse)
# load the package
library(nnet)
# load data
data(longley)
x <- longley[,1:6]
y <- longley[,7]
# fit model
fit <- nnet(Employed~., longley, size=12, maxit=1000, linout=T, decay=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, x, type="raw")
# summarize accuracy
mse <- mean((y - predictions)^2)
print(mse)
# load the package
library(nnet)
# load data
data(longley)
x <- longley[,1:6]
y <- longley[,7]
# fit model
fit <- nnet(Employed~., longley, size=12, maxit=1000, linout=T, decay=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, x, type="raw")
# summarize accuracy
mse <- mean((y - predictions)^2)
print(mse)
library(RNN)
install.packages("shiny")
install.packages("leaflet")
install.packages("rgdal")
install.packages("makeIcon")
#安裝Library(Done!)//新電腦請先安裝
#----------------------------------------------------------------------------------------------------------
#install.packages("shiny")
#install.packages("leaflet")
#install.packages("rgdal")
#install.packages("makeIcon")
#----------------------------------------------------------------------------------------------------------
#啟動Library
#----------------------------------------------------------------------------------------------------------
library(shiny) #類似網頁(用途多，可把地圖用上去在做分析)
library(leaflet) #製作地圖用
library(rgdal) #製作SHAPEFILE用(區塊圖)
#----------------------------------------------------------------------------------------------------------
#把要匯入的檔案加進去，並設定路徑
#----------------------------------------------------------------------------------------------------------
csvpath = "C:/Mapcase/Data/"
csvfilesn = list.files( path = csvpath, pattern="*.csv")
tmprt = function(rtcsv){read.csv( rtcsv, stringsAsFactors = FALSE)}
Cdata = lapply(paste(csvpath,csvfilesn, sep = ""), tmprt)
csvfilesn
setwd("C:/Mapcase/f")
#----------------------------------------------------------------------------------------------------------
#用rgdal這個package將設定好shapefile區塊圖(工廠)和把座標(WGS84)調整好!
#----------------------------------------------------------------------------------------------------------
states <- readOGR("f.shp",layer="f",verbose = FALSE,encoding = "UTF-8")
w8 <- spTransform(states,CRS("+proj=longlat +datum=WGS84"))
#----------------------------------------------------------------------------------------------------------
#ui是負責前端排版和按鈕(2015年-重症-月)
#----------------------------------------------------------------------------------------------------------
ui <- bootstrapPage(
title = "Dengue case mapping",
tags$style(type="text/css","html,body{width:100%;height:100%}"),
leafletOutput("map",width="100%",height="100%"),
absolutePanel(top=100,right=20,draggable = FALSE,
absolutePanel(top = -60, right = -10,titlePanel(h2("Dengue Case Mapping"))),
sliderInput("range", "Year:2015 - Month:", 1, 12,value = c(1,12), step = 1)
)
)
Data_read = Cdata[[4]]
#----------------------------------------------------------------------------------------------------------
#設定標籤(所有重症案例)
#----------------------------------------------------------------------------------------------------------
case_lable<- colorFactor(c("red","black","purple"), domain = c("一般登革","重症個案","重症死亡個案"))
#----------------------------------------------------------------------------------------------------------
#server是負責後端，計算與繪製
#----------------------------------------------------------------------------------------------------------
server <-function(input,output){
INTimebar <- reactive({Data_read[Data_read$Month >= input$range[1] & Data_read$Month <= input$range[2],]})
output$map <- renderLeaflet({leaflet(Data_read) %>%
addPolygons(data=w8,popup= ~FNAME) %>%
addTiles() %>%
fitBounds(~min(Enumeration_unit_long),
~min(Enumeration_unit_lat),
~max(Enumeration_unit_long),
~max(Enumeration_unit_lat)
)
}
)
observeEvent(input$range,
{leafletProxy("map",data = INTimebar()) %>%
clearMarkerClusters() %>%
addCircleMarkers(data=INTimebar(),
lng=~Enumeration_unit_long,
lat=~Enumeration_unit_lat,
popup = ~paste("<h5>",Area,"</h5>",
Date,"<br>",
Village,"<br>",
Death,"<br>",
Death_num,"/",Case,"<br>"
),
color=~case_lable(Death),
stroke = FALSE,
fillOpacity = 0.9,
clusterOptions = markerClusterOptions()
)
}
)
}
#----------------------------------------------------------------------------------------------------------
#啟動Shiny
#----------------------------------------------------------------------------------------------------------
shinyApp(ui,server)
View(Data_read)
View(Data_read)
View(Data_read)
#安裝Library(Done!)//新電腦請先安裝
#----------------------------------------------------------------------------------------------------------
#install.packages("shiny")
#install.packages("leaflet")
#install.packages("rgdal")
#install.packages("makeIcon")
#----------------------------------------------------------------------------------------------------------
#啟動Library
#----------------------------------------------------------------------------------------------------------
library(shiny) #類似網頁(用途多，可把地圖用上去在做分析)
library(leaflet) #製作地圖用
library(rgdal) #製作SHAPEFILE用(區塊圖)
#----------------------------------------------------------------------------------------------------------
#把要匯入的檔案加進去，並設定路徑
#----------------------------------------------------------------------------------------------------------
csvpath = "C:/Mapcase/Data/"
csvfilesn = list.files( path = csvpath, pattern="*.csv")
tmprt = function(rtcsv){read.csv( rtcsv, stringsAsFactors = FALSE)}
Cdata = lapply(paste(csvpath,csvfilesn, sep = ""), tmprt)
csvfilesn
setwd("C:/Mapcase/f")
#----------------------------------------------------------------------------------------------------------
#用rgdal這個package將設定好shapefile區塊圖(工廠)和把座標(WGS84)調整好!
#----------------------------------------------------------------------------------------------------------
states <- readOGR("f.shp",layer="f",verbose = FALSE,encoding = "UTF-8")
w8 <- spTransform(states,CRS("+proj=longlat +datum=WGS84"))
#----------------------------------------------------------------------------------------------------------
#ui是負責前端排版和按鈕(2015年-重症-月)
#----------------------------------------------------------------------------------------------------------
ui <- bootstrapPage(
title = "Dengue case mapping",
tags$style(type="text/css","html,body{width:100%;height:100%}"),
leafletOutput("map",width="100%",height="100%"),
absolutePanel(top=100,right=20,draggable = FALSE,
absolutePanel(top = -60, right = -10,titlePanel(h2("Dengue Case Mapping"))),
sliderInput("range", "Year:2015 - Month:", 1, 12,value = c(1,12), step = 1)
)
)
Data_read = Cdata[[3]]
#----------------------------------------------------------------------------------------------------------
#設定標籤(所有重症案例)
#----------------------------------------------------------------------------------------------------------
case_lable<- colorFactor(c("red","black","purple"), domain = c("一般登革","重症個案","重症死亡個案"))
#----------------------------------------------------------------------------------------------------------
#server是負責後端，計算與繪製
#----------------------------------------------------------------------------------------------------------
server <-function(input,output){
INTimebar <- reactive({Data_read[Data_read$Month >= input$range[1] & Data_read$Month <= input$range[2],]})
output$map <- renderLeaflet({leaflet(Data_read) %>%
addPolygons(data=w8,popup= ~FNAME) %>%
addTiles() %>%
fitBounds(~min(Enumeration_unit_long),
~min(Enumeration_unit_lat),
~max(Enumeration_unit_long),
~max(Enumeration_unit_lat)
)
}
)
observeEvent(input$range,
{leafletProxy("map",data = INTimebar()) %>%
clearMarkerClusters() %>%
addCircleMarkers(data=INTimebar(),
lng=~Enumeration_unit_long,
lat=~Enumeration_unit_lat,
popup = ~paste("<h5>",Area,"</h5>",
Date,"<br>",
Village,"<br>",
Death,"<br>",
Death_num,"/",Case,"<br>"
),
color=~case_lable(Death),
stroke = FALSE,
fillOpacity = 0.9,
clusterOptions = markerClusterOptions()
)
}
)
}
#----------------------------------------------------------------------------------------------------------
#啟動Shiny
#----------------------------------------------------------------------------------------------------------
shinyApp(ui,server)
#安裝Library(Done!)//新電腦請先安裝
#----------------------------------------------------------------------------------------------------------
#install.packages("shiny")
#install.packages("leaflet")
#install.packages("rgdal")
#install.packages("makeIcon")
#----------------------------------------------------------------------------------------------------------
#啟動Library
#----------------------------------------------------------------------------------------------------------
library(shiny) #類似網頁(用途多，可把地圖用上去在做分析)
library(leaflet) #製作地圖用
library(rgdal) #製作SHAPEFILE用(區塊圖)
#----------------------------------------------------------------------------------------------------------
#把要匯入的檔案加進去，並設定路徑
#----------------------------------------------------------------------------------------------------------
csvpath = "C:/Mapcase/Data/"
csvfilesn = list.files( path = csvpath, pattern="*.csv")
tmprt = function(rtcsv){read.csv( rtcsv, stringsAsFactors = FALSE)}
Cdata = lapply(paste(csvpath,csvfilesn, sep = ""), tmprt)
csvfilesn
setwd("C:/Mapcase/f")
#----------------------------------------------------------------------------------------------------------
#用rgdal這個package將設定好shapefile區塊圖(工廠)和把座標(WGS84)調整好!
#----------------------------------------------------------------------------------------------------------
states <- readOGR("f.shp",layer="f",verbose = FALSE,encoding = "UTF-8")
w8 <- spTransform(states,CRS("+proj=longlat +datum=WGS84"))
#----------------------------------------------------------------------------------------------------------
#ui是負責前端排版和按鈕(2015年-重症-月)
#----------------------------------------------------------------------------------------------------------
ui <- bootstrapPage(
title = "Dengue case mapping",
tags$style(type="text/css","html,body{width:100%;height:100%}"),
leafletOutput("map",width="100%",height="100%"),
absolutePanel(top=100,right=20,draggable = FALSE,
absolutePanel(top = -60, right = -10,titlePanel(h2("Dengue Case Mapping"))),
sliderInput("range", "Year:2015 - Month:", 1, 12,value = c(1,12), step = 1)
)
)
Data_read = Cdata[[1]]
#----------------------------------------------------------------------------------------------------------
#設定標籤(所有重症案例)
#----------------------------------------------------------------------------------------------------------
case_lable<- colorFactor(c("red","black","purple"), domain = c("一般登革","重症個案","重症死亡個案"))
#----------------------------------------------------------------------------------------------------------
#server是負責後端，計算與繪製
#----------------------------------------------------------------------------------------------------------
server <-function(input,output){
INTimebar <- reactive({Data_read[Data_read$Month >= input$range[1] & Data_read$Month <= input$range[2],]})
output$map <- renderLeaflet({leaflet(Data_read) %>%
addPolygons(data=w8,popup= ~FNAME) %>%
addTiles() %>%
fitBounds(~min(Enumeration_unit_long),
~min(Enumeration_unit_lat),
~max(Enumeration_unit_long),
~max(Enumeration_unit_lat)
)
}
)
observeEvent(input$range,
{leafletProxy("map",data = INTimebar()) %>%
clearMarkerClusters() %>%
addCircleMarkers(data=INTimebar(),
lng=~Enumeration_unit_long,
lat=~Enumeration_unit_lat,
popup = ~paste("<h5>",Area,"</h5>",
Date,"<br>",
Village,"<br>",
Death,"<br>",
Death_num,"/",Case,"<br>"
),
color=~case_lable(Death),
stroke = FALSE,
fillOpacity = 0.9,
clusterOptions = markerClusterOptions()
)
}
)
}
#----------------------------------------------------------------------------------------------------------
#啟動Shiny
#----------------------------------------------------------------------------------------------------------
shinyApp(ui,server)
